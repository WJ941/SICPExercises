(define (make-deque )
  (cons '() '())
)

(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (empty-queue? queue) (null? (front-ptr queue)))

(define (set-front-ptr! queue item)
  (set-car! queue item))

(define (set-rear-ptr! queue item)
        (set-cdr! queue item))
(define (front-deque queue)
    (car (front-ptr queue))
)
(define (rear-deque queue)
    (car (rear-ptr queue))
)
(define (front-insert-deque! queue item)
  (let ((new-pair (cons item '())))
  (cond ((empty-queue? queue)
            (set-front-ptr! queue new-pair)
            (set-rear-ptr! queue new-pair)
            queue)
    (else
      (set-cdr! new-pair (front-ptr queue))
      (set-front-ptr! queue new-pair)
      queue)))
)
(define (rear-insert-deque! queue item)
  (let ((new-pair (cons item '())))
    (cond ((empty-queue? queue)
      (set-front-ptr! queue new-pair)
      (set-rear-ptr! queue new-pair)
      queue)
    (else
      (set-cdr! (rear-ptr queue) new-pair)
      (set-rear-ptr! queue new-pair)
      queue)))  
)
(define (front-delete-deque! queue)
  (cond ((empty-queue? queue)
            (error "DELETE! called with an empty queue" queue))
      (else (set-front-ptr! queue (cdr (front-ptr queue)))
          queue))
)
(define (rear-delete-deque! queue)
  (cond ((empty-queue? queue)
            (error "DELETE! called with an empty queue" queue))
      (else (set-rear-ptr! queue (cdr (front-ptr queue)))
          queue))
)