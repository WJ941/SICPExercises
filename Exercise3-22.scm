(define (make-queue)
  (let ((initial-queue (cons '() '())))
    (let (
            (front-ptr (lambda () (car initial-queue)))
            (rear-ptr  (lambda () (cdr initial-queue)))
            (empty-queue? (lambda () (null? (car initial-queue))))
            (set-front-ptr! (lambda (item) (set-car! initial-queue item)))
            (set-rear-ptr! (lambda (item) (set-cdr! initial-queue item)))
          )
      (let (
          (insert-queue! (lambda (item)
            (let ((new-pair (cons item '())))
              (cond ((empty-queue?)
                        (set-front-ptr! new-pair)
                        (set-rear-ptr! new-pair)
                        initial-queue)
                (else
                  (set-cdr! (rear-ptr initial-queue) new-pair)
                  (set-rear-ptr! initial-queue new-pair)
                  initial-queue))
          )))
          (delete-queue! (lambda () 
              (cond ((empty-queue?)
                (error "DELETE! called with an empty queue" initial-queue))
              (else (set-front-ptr! (cdr (front-ptr)))
                initial-queue))
            ))
        )
        (define (dispatch m)
          (cond ((eq? m 'front-ptr) (front-ptr))
                ((eq? m 'insert-queue!) insert-queue!)
                ((eq? m 'delete-queue!) (delete-queue!))
          )d
        )
        dispatch
    )
    )
  )
)