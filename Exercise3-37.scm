(load "constrantsys.scm")
(define (cv const)
  (let ((z (make-connector)))
      (constant const z)
  z)
)
(define (c/ dividend divisor )
  (let ((z (make-connector)))
      (multiplier z divisor dividend)
  z)
)
(define (c* m1 m2 )
  (let ((z (make-connector)))
      (multiplier m1 m2 z)
  z)
)
(define (c+ x y)
  (let ((z (make-connector)))
          (adder x y z)
          z))

(define (celsius-fahrenheit-converter x)
  (c+ (c* (c/ (cv 9.0) (cv 5.0))
          x)
      (cv 32)))
(define C (make-connector))
(define F (celsius-fahrenheit-converter C))

(probe "celsius" C)
(probe "fahrenheit" F)

