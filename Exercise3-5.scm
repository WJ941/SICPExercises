(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))

;(define (estimate-integral P lower-bounder upper-boundertrials)
; ()
;)

(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
            (/ trials-passed trials))
          ((experiment)
            (iter (- trials-remaining 1)
                  (+ trials-passed 1)))
          (else (iter (- trials-remaining 1)
                      trials-passed))))
  (iter trials 0))
(define (predicate x y)
  (>= 9 (+ (square (- x 5)) (square (- y 7))))
)
(define lower-bounder (list 2 4))
(define upper-bounder (list 8 10))
(define experiment
  (lambda () (predicate (random-in-range 2.0 8.0) (random-in-range 4.0 10.0)))
)

(define (estimate-pi trials)
  (* 4.0 (monte-carlo trials experiment)))