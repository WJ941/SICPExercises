(define (pi-submands n)
  (cons-stream (/ 1.0 n)
    (stream-map - (pi-submands (+ n 2)))
  )
)
(define (partial-sums s)
  (define sums
    (cons-stream (stream-car s)
      (add-stream (stream-cdr s) sums)
    )
  )
  sums
)
(define pi-stream 
  (scale-stream (partial-sums (pi-submands 1)) 4)
  )

(define (euler-transform s)
  (let  ((s0 (stream-ref s 0))
        (s1 (stream-ref s 1))
        (s2 (stream-ref s 2)))
    (cons-stream (- s2 (/ (square (- s2 s1)) (+ s0 (* -2 s1) s2)))
      (euler-transform (stream-cdr s))
    )
  )
)
(define (make-tableau transform s)
  (cons-stream s (make-tableau transform (transform s)))
)
(define (accelerated-sequence transform s)
  (stream-map stream-car (make-tableau transform s))
)
(display-stream (accelerated-sequence euler-transform pi-stream))